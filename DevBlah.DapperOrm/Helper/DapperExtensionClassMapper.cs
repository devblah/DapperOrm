using System;
using System.Linq;
using System.Reflection;
using DapperExtensions.Mapper;
using DevBlah.DapperOrm.Helper.Attributes;

namespace DevBlah.DapperOrm.Helper
{
    public class DapperExtensionClassMapper<T> : ClassMapper<T> where T : class
    {
        public DapperExtensionClassMapper()
        {
            // reflect template type
            Type type = typeof(T);

            // search custom attributes
            object[] attributes = type.GetCustomAttributes(typeof(TableAttribute), false);
            if (attributes.Length != 1)
            {
                throw new Exception(string.Format("There is no specified Table on the '{0}' entity.", type.Name));
            }

            var tableAttribute = attributes.First() as TableAttribute;
            if (tableAttribute == null)
            {
                throw new Exception(string.Format("There is no specified Table on the '{0}' entity.", type.Name));
            }

            // get parts of table name
            string[] tableParts = tableAttribute.Name.Split(new[] { '.' });

            TableName = tableParts[tableParts.Length - 1];

            SchemaName = tableParts[tableParts.Length - 2];

            PropertyInfo keyField = type.GetProperties().FirstOrDefault(
                p => p.GetCustomAttribute<KeyAttribute>() != null);

            if (keyField != null && keyField.GetCustomAttribute<KeyAttribute>().IsAutoGenerated)
            {
                Map(keyField).Key(KeyType.Identity);
            }
            else if (keyField != null)
            {
                Map(keyField).Key(KeyType.Assigned);
            }

            AutoMap();
        }
    }
}